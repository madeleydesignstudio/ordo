import{j as r,d as a,t as o}from"./assets/db-DlibAWFV.js";import{desc as n}from"drizzle-orm";import{a as p}from"./assets/index-OQn0RJ4I.js";import"drizzle-orm/neon-http";import"@neondatabase/serverless";import"dotenv";import"drizzle-orm/pg-core";import"node:async_hooks";import"h3";const q=p("/api/tasks")({GET:async({request:s})=>{try{const{searchParams:t}=new URL(s.url),e=t.get("projectId");let i=a.query.tasks.findMany({orderBy:[n(o.createdAt)]});e&&(i=a.query.tasks.findMany({where:(u,{eq:d})=>d(u.projectId,parseInt(e,10)),orderBy:[n(o.createdAt)]}));const c=await i;return r({tasks:c})}catch(t){return console.error("Error fetching tasks:",t),r({error:"Failed to fetch tasks"},{status:500})}},POST:async({request:s})=>{try{const t=await s.json();if(!t.title)return r({error:"Title is required"},{status:400});if(!t.projectId)return r({error:"Project ID is required"},{status:400});const e=await a.insert(o).values({title:t.title,description:t.description||null,status:t.status||"todo",priority:t.priority||"medium",projectId:parseInt(t.projectId,10),dueDate:t.dueDate?new Date(t.dueDate):null}).returning();return r({task:e[0]},{status:201})}catch(t){return console.error("Error creating task:",t),r({error:"Failed to create task"},{status:500})}}});export{q as APIRoute};
