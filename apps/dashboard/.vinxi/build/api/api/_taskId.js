import{j as r,d as n,t as o}from"./assets/db-DlibAWFV.js";import{eq as d}from"drizzle-orm";import{a as p}from"./assets/index-OQn0RJ4I.js";import"drizzle-orm/neon-http";import"@neondatabase/serverless";import"dotenv";import"drizzle-orm/pg-core";import"node:async_hooks";import"h3";const D=p("/api/tasks/$taskId")({GET:async({request:u,params:i})=>{try{const{taskId:e}=i,s=parseInt(e,10);if(isNaN(s))return r({error:"Invalid task ID"},{status:400});const t=await n.query.tasks.findFirst({where:d(o.id,s)});return t?r(t):r({error:"Task not found"},{status:404})}catch(e){return console.error("Error fetching task:",e),r({error:"Failed to fetch task"},{status:500})}},PUT:async({request:u,params:i})=>{try{const{taskId:e}=i,s=parseInt(e,10);if(isNaN(s))return r({error:"Invalid task ID"},{status:400});const t=await u.json(),a=await n.query.tasks.findFirst({where:d(o.id,s)});if(!a)return r({error:"Task not found"},{status:404});const c=await n.update(o).set({title:t.title||a.title,description:t.description!==void 0?t.description:a.description,status:t.status||a.status,priority:t.priority||a.priority,projectId:t.projectId?parseInt(t.projectId,10):a.projectId,dueDate:t.dueDate?new Date(t.dueDate):a.dueDate,updatedAt:new Date}).where(d(o.id,s)).returning();return r({task:c[0]})}catch(e){return console.error("Error updating task:",e),r({error:"Failed to update task"},{status:500})}},DELETE:async({request:u,params:i})=>{try{const{taskId:e}=i,s=parseInt(e,10);return isNaN(s)?r({error:"Invalid task ID"},{status:400}):(await n.delete(o).where(d(o.id,s)).returning()).length===0?r({error:"Task not found"},{status:404}):r({message:"Task deleted successfully"})}catch(e){return console.error("Error deleting task:",e),r({error:"Failed to delete task"},{status:500})}}});export{D as APIRoute};
