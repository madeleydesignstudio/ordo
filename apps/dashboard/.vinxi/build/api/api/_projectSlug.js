import{d as s,t as u,j as e,p as n}from"./assets/db-DlibAWFV.js";import{eq as i}from"drizzle-orm";import{a as l}from"./assets/index-OQn0RJ4I.js";import"drizzle-orm/neon-http";import"@neondatabase/serverless";import"dotenv";import"drizzle-orm/pg-core";import"node:async_hooks";import"h3";const P=l("/api/projects/$projectSlug")({GET:async({request:a,params:o})=>{try{const{projectSlug:t}=o,r=await s.query.projects.findFirst({where:i(n.id,parseInt(t,10)),with:{tasks:!0}});return r?e(r):e({error:"Project not found"},{status:404})}catch(t){return console.error("Error fetching project:",t),e({error:"Failed to fetch project"},{status:500})}},POST:async({request:a,params:o})=>{try{const{projectSlug:t}=o,r=await a.json();if(!r.title)return e({error:"Title is required"},{status:400});if(!await s.query.projects.findFirst({where:i(n.id,parseInt(t,10))}))return e({error:"Project not found"},{status:404});const d=await s.insert(u).values({title:r.title,description:r.description||null,status:r.status||"todo",priority:r.priority||"medium",projectId:parseInt(t,10),dueDate:r.dueDate?new Date(r.dueDate):null}).returning();return e({task:d[0]},{status:201})}catch(t){return console.error("Error creating task:",t),e({error:"Failed to create task"},{status:500})}},DELETE:async({request:a,params:o})=>{try{const{projectSlug:t}=o,{searchParams:r}=new URL(a.url),c=r.get("taskId");return c?(await s.delete(u).where(i(u.id,parseInt(c,10))).returning()).length===0?e({error:"Task not found"},{status:404}):e({message:"Task deleted successfully"}):(await s.delete(n).where(i(n.id,parseInt(t,10))).returning()).length===0?e({error:"Project not found"},{status:404}):e({message:"Project deleted successfully"})}catch(t){return console.error("Error deleting:",t),e({error:"Failed to delete"},{status:500})}}});export{P as APIRoute};
