/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectManagerImport } from './routes/project-manager'
import { Route as FinanceManagerImport } from './routes/finance-manager'
import { Route as ContentManagerImport } from './routes/content-manager'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ProjectManagerRoute = ProjectManagerImport.update({
  id: '/project-manager',
  path: '/project-manager',
  getParentRoute: () => rootRoute,
} as any)

const FinanceManagerRoute = FinanceManagerImport.update({
  id: '/finance-manager',
  path: '/finance-manager',
  getParentRoute: () => rootRoute,
} as any)

const ContentManagerRoute = ContentManagerImport.update({
  id: '/content-manager',
  path: '/content-manager',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/content-manager': {
      id: '/content-manager'
      path: '/content-manager'
      fullPath: '/content-manager'
      preLoaderRoute: typeof ContentManagerImport
      parentRoute: typeof rootRoute
    }
    '/finance-manager': {
      id: '/finance-manager'
      path: '/finance-manager'
      fullPath: '/finance-manager'
      preLoaderRoute: typeof FinanceManagerImport
      parentRoute: typeof rootRoute
    }
    '/project-manager': {
      id: '/project-manager'
      path: '/project-manager'
      fullPath: '/project-manager'
      preLoaderRoute: typeof ProjectManagerImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/content-manager': typeof ContentManagerRoute
  '/finance-manager': typeof FinanceManagerRoute
  '/project-manager': typeof ProjectManagerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/content-manager': typeof ContentManagerRoute
  '/finance-manager': typeof FinanceManagerRoute
  '/project-manager': typeof ProjectManagerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/content-manager': typeof ContentManagerRoute
  '/finance-manager': typeof FinanceManagerRoute
  '/project-manager': typeof ProjectManagerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/content-manager' | '/finance-manager' | '/project-manager'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/content-manager' | '/finance-manager' | '/project-manager'
  id:
    | '__root__'
    | '/'
    | '/content-manager'
    | '/finance-manager'
    | '/project-manager'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContentManagerRoute: typeof ContentManagerRoute
  FinanceManagerRoute: typeof FinanceManagerRoute
  ProjectManagerRoute: typeof ProjectManagerRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContentManagerRoute: ContentManagerRoute,
  FinanceManagerRoute: FinanceManagerRoute,
  ProjectManagerRoute: ProjectManagerRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/content-manager",
        "/finance-manager",
        "/project-manager"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/content-manager": {
      "filePath": "content-manager.tsx"
    },
    "/finance-manager": {
      "filePath": "finance-manager.tsx"
    },
    "/project-manager": {
      "filePath": "project-manager.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
