import { jsx, jsxs } from 'react/jsx-runtime';
import { useQueryClient, useQuery, useMutation } from '@tanstack/react-query';
import { useNavigate, Link } from '@tanstack/react-router';
import { useState } from 'react';

const q = function() {
  const b = useNavigate(), [y, a] = useState(false), [i, o] = useState({ title: "", description: "", projectId: "", priority: "medium", dueDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0] }), x = useQueryClient(), { data: d, isLoading: f } = useQuery({ queryKey: ["tasks"], queryFn: async () => {
    const e = await fetch("/api/tasks");
    if (!e.ok) throw new Error("Failed to fetch tasks");
    return e.json();
  } }), { data: v, isLoading: N } = useQuery({ queryKey: ["projects"], queryFn: async () => {
    const e = await fetch("/api/projects");
    if (!e.ok) throw new Error("Failed to fetch projects");
    return e.json();
  } }), l = useMutation({ mutationFn: async (e) => {
    const n = e.projectId || "1", s = await fetch(`/api/projects/${n}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ title: e.title, description: e.description, priority: e.priority, dueDate: e.dueDate }) });
    if (!s.ok) {
      const C = await s.json();
      throw new Error(C.error || "Failed to create task");
    }
    return s.json();
  }, onSuccess: () => {
    x.invalidateQueries({ queryKey: ["tasks"] }), a(false), o({ title: "", description: "", projectId: "", priority: "medium", dueDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0] });
  } }), j = (e) => {
    e.preventDefault(), l.mutate(i);
  }, c = (e) => {
    b({ to: "/project-manager/task/$taskId", params: { taskId: e } });
  }, w = (/* @__PURE__ */ new Date()).toISOString().split("T")[0], u = (d == null ? void 0 : d.tasks.filter((e) => e.dueDate ? e.dueDate.split("T")[0] === w : false)) || [], m = (d == null ? void 0 : d.tasks.filter((e) => !e.dueDate)) || [];
  return f || N ? jsx("div", { className: "p-6", children: "Loading..." }) : jsxs("div", { className: "p-6", children: [jsxs("div", { className: "flex justify-between items-center mb-6", children: [jsx("h1", { className: "text-2xl font-bold", children: "Inbox" }), jsx("button", { onClick: () => a(true), className: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors", children: "Create Task" })] }), jsxs("div", { className: "mb-8", children: [jsx("h2", { className: "text-xl font-semibold mb-4", children: "Today's Tasks" }), u.length === 0 ? jsx("div", { className: "text-gray-500 italic p-4 border rounded-lg", children: "No tasks due today." }) : jsx("div", { className: "grid gap-4", children: u.map((e) => jsxs("div", { onClick: () => c(e.id), className: "p-4 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer group", children: [jsxs("div", { className: "flex justify-between items-start", children: [jsxs("div", { children: [jsx("h3", { className: "text-lg font-semibold group-hover:text-blue-600 transition-colors", children: e.title }), e.description && jsx("p", { className: "text-gray-600 mt-1", children: e.description })] }), jsx("div", { className: "flex items-center gap-2", children: jsx("span", { className: `px-2 py-1 rounded-full text-xs ${e.priority === "low" ? "bg-gray-200 text-gray-700" : e.priority === "medium" ? "bg-blue-200 text-blue-700" : e.priority === "high" ? "bg-orange-200 text-orange-700" : "bg-red-200 text-red-700"}`, children: e.priority }) })] }), jsx("div", { className: "mt-3 flex justify-between items-center text-sm text-gray-500", children: jsx("div", { children: e.project && jsxs(Link, { to: "/project-manager/$projectSlug", params: { projectSlug: e.project.id.toString() }, className: "text-blue-600 hover:underline", onClick: (n) => n.stopPropagation(), children: ["Project: ", e.project.name] }) }) })] }, e.id)) })] }), jsxs("div", { children: [jsx("h2", { className: "text-xl font-semibold mb-4", children: "Inbox Tasks" }), m.length === 0 ? jsx("div", { className: "text-gray-500 italic p-4 border rounded-lg", children: "No inbox tasks. Create a task without a due date to see it here." }) : jsx("div", { className: "grid gap-4", children: m.map((e) => jsxs("div", { onClick: () => c(e.id), className: "p-4 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer group", children: [jsxs("div", { className: "flex justify-between items-start", children: [jsxs("div", { children: [jsx("h3", { className: "text-lg font-semibold group-hover:text-blue-600 transition-colors", children: e.title }), e.description && jsx("p", { className: "text-gray-600 mt-1", children: e.description })] }), jsx("div", { className: "flex items-center gap-2", children: jsx("span", { className: `px-2 py-1 rounded-full text-xs ${e.priority === "low" ? "bg-gray-200 text-gray-700" : e.priority === "medium" ? "bg-blue-200 text-blue-700" : e.priority === "high" ? "bg-orange-200 text-orange-700" : "bg-red-200 text-red-700"}`, children: e.priority }) })] }), jsx("div", { className: "mt-3 flex justify-between items-center text-sm text-gray-500", children: jsx("div", { children: e.project && jsxs(Link, { to: "/project-manager/$projectSlug", params: { projectSlug: e.project.id.toString() }, className: "text-blue-600 hover:underline", onClick: (n) => n.stopPropagation(), children: ["Project: ", e.project.name] }) }) })] }, e.id)) })] }), y && jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: jsxs("div", { className: "bg-white rounded-lg p-6 w-full max-w-md", children: [jsx("h2", { className: "text-xl font-bold mb-4", children: "Create New Task" }), jsxs("form", { onSubmit: j, children: [jsxs("div", { className: "mb-4", children: [jsx("label", { htmlFor: "title", className: "block text-sm font-medium text-gray-700 mb-1", children: "Task Title" }), jsx("input", { type: "text", id: "title", value: i.title, onChange: (e) => o({ ...i, title: e.target.value }), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", required: true })] }), jsxs("div", { className: "mb-4", children: [jsx("label", { htmlFor: "description", className: "block text-sm font-medium text-gray-700 mb-1", children: "Description" }), jsx("textarea", { id: "description", value: i.description, onChange: (e) => o({ ...i, description: e.target.value }), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", rows: 3 })] }), jsxs("div", { className: "mb-4", children: [jsx("label", { htmlFor: "project", className: "block text-sm font-medium text-gray-700 mb-1", children: "Project (Optional)" }), jsxs("select", { id: "project", value: i.projectId, onChange: (e) => o({ ...i, projectId: e.target.value }), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [jsx("option", { value: "", children: "No Project" }), v == null ? void 0 : v.projects.map((e) => jsx("option", { value: e.id, children: e.name }, e.id))] })] }), jsxs("div", { className: "mb-4", children: [jsx("label", { htmlFor: "priority", className: "block text-sm font-medium text-gray-700 mb-1", children: "Priority" }), jsxs("select", { id: "priority", value: i.priority, onChange: (e) => o({ ...i, priority: e.target.value }), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [jsx("option", { value: "low", children: "Low" }), jsx("option", { value: "medium", children: "Medium" }), jsx("option", { value: "high", children: "High" }), jsx("option", { value: "urgent", children: "Urgent" })] })] }), jsxs("div", { className: "mb-4", children: [jsx("label", { htmlFor: "dueDate", className: "block text-sm font-medium text-gray-700 mb-1", children: "Due Date (Optional)" }), jsx("input", { type: "date", id: "dueDate", value: i.dueDate, onChange: (e) => o({ ...i, dueDate: e.target.value }), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" })] }), jsxs("div", { className: "flex justify-end gap-2", children: [jsx("button", { type: "button", onClick: () => a(false), className: "px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 transition-colors", children: "Cancel" }), jsx("button", { type: "submit", className: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors", disabled: l.isPending, children: l.isPending ? "Creating..." : "Create" })] })] })] }) })] });
};

export { q as component };
//# sourceMappingURL=inbox-DANAjrwU.mjs.map
