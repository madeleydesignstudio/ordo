/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as ProjectManagerRouteImport } from './routes/project-manager/route'
import { Route as FinanceManagerRouteImport } from './routes/finance-manager/route'
import { Route as ContentManagerRouteImport } from './routes/content-manager/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as ProjectManagerIndexImport } from './routes/project-manager/index'
import { Route as FinanceManagerIndexImport } from './routes/finance-manager/index'
import { Route as ContentManagerIndexImport } from './routes/content-manager/index'
import { Route as ProjectManagerTasksImport } from './routes/project-manager/tasks'
import { Route as ProjectManagerProjectsImport } from './routes/project-manager/projects'
import { Route as ProjectManagerNotesImport } from './routes/project-manager/notes'
import { Route as ProjectManagerNotebooksImport } from './routes/project-manager/notebooks'
import { Route as ProjectManagerMyIssuesImport } from './routes/project-manager/my-issues'
import { Route as ProjectManagerInboxImport } from './routes/project-manager/inbox'
import { Route as ProjectManagerCanvasImport } from './routes/project-manager/canvas'
import { Route as ContentManagerPeopleImport } from './routes/content-manager/people'
import { Route as ContentManagerOpportunitiesImport } from './routes/content-manager/opportunities'
import { Route as ContentManagerEmailImport } from './routes/content-manager/email'
import { Route as ContentManagerCompaniesImport } from './routes/content-manager/companies'
import { Route as ContentManagerBulkUnsubscribeImport } from './routes/content-manager/bulk-unsubscribe'
import { Route as AuthSignupImport } from './routes/_auth/signup'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as ProjectManagerTaskTaskIdImport } from './routes/project-manager/task/$taskId'
import { Route as ProjectManagerProjectProjectIdImport } from './routes/project-manager/project/$projectId'
import { Route as ProjectManagerProjectProjectIdSettingsImport } from './routes/project-manager/project/$projectId/settings'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ProjectManagerRouteRoute = ProjectManagerRouteImport.update({
  id: '/project-manager',
  path: '/project-manager',
  getParentRoute: () => rootRoute,
} as any)

const FinanceManagerRouteRoute = FinanceManagerRouteImport.update({
  id: '/finance-manager',
  path: '/finance-manager',
  getParentRoute: () => rootRoute,
} as any)

const ContentManagerRouteRoute = ContentManagerRouteImport.update({
  id: '/content-manager',
  path: '/content-manager',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const ProjectManagerIndexRoute = ProjectManagerIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const FinanceManagerIndexRoute = FinanceManagerIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FinanceManagerRouteRoute,
} as any)

const ContentManagerIndexRoute = ContentManagerIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContentManagerRouteRoute,
} as any)

const ProjectManagerTasksRoute = ProjectManagerTasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerProjectsRoute = ProjectManagerProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerNotesRoute = ProjectManagerNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerNotebooksRoute = ProjectManagerNotebooksImport.update({
  id: '/notebooks',
  path: '/notebooks',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerMyIssuesRoute = ProjectManagerMyIssuesImport.update({
  id: '/my-issues',
  path: '/my-issues',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerInboxRoute = ProjectManagerInboxImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerCanvasRoute = ProjectManagerCanvasImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ContentManagerPeopleRoute = ContentManagerPeopleImport.update({
  id: '/people',
  path: '/people',
  getParentRoute: () => ContentManagerRouteRoute,
} as any)

const ContentManagerOpportunitiesRoute =
  ContentManagerOpportunitiesImport.update({
    id: '/opportunities',
    path: '/opportunities',
    getParentRoute: () => ContentManagerRouteRoute,
  } as any)

const ContentManagerEmailRoute = ContentManagerEmailImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => ContentManagerRouteRoute,
} as any)

const ContentManagerCompaniesRoute = ContentManagerCompaniesImport.update({
  id: '/companies',
  path: '/companies',
  getParentRoute: () => ContentManagerRouteRoute,
} as any)

const ContentManagerBulkUnsubscribeRoute =
  ContentManagerBulkUnsubscribeImport.update({
    id: '/bulk-unsubscribe',
    path: '/bulk-unsubscribe',
    getParentRoute: () => ContentManagerRouteRoute,
  } as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const ProjectManagerTaskTaskIdRoute = ProjectManagerTaskTaskIdImport.update({
  id: '/task/$taskId',
  path: '/task/$taskId',
  getParentRoute: () => ProjectManagerRouteRoute,
} as any)

const ProjectManagerProjectProjectIdRoute =
  ProjectManagerProjectProjectIdImport.update({
    id: '/project/$projectId',
    path: '/project/$projectId',
    getParentRoute: () => ProjectManagerRouteRoute,
  } as any)

const ProjectManagerProjectProjectIdSettingsRoute =
  ProjectManagerProjectProjectIdSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => ProjectManagerProjectProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/content-manager': {
      id: '/content-manager'
      path: '/content-manager'
      fullPath: '/content-manager'
      preLoaderRoute: typeof ContentManagerRouteImport
      parentRoute: typeof rootRoute
    }
    '/finance-manager': {
      id: '/finance-manager'
      path: '/finance-manager'
      fullPath: '/finance-manager'
      preLoaderRoute: typeof FinanceManagerRouteImport
      parentRoute: typeof rootRoute
    }
    '/project-manager': {
      id: '/project-manager'
      path: '/project-manager'
      fullPath: '/project-manager'
      preLoaderRoute: typeof ProjectManagerRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthRouteImport
    }
    '/content-manager/bulk-unsubscribe': {
      id: '/content-manager/bulk-unsubscribe'
      path: '/bulk-unsubscribe'
      fullPath: '/content-manager/bulk-unsubscribe'
      preLoaderRoute: typeof ContentManagerBulkUnsubscribeImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/content-manager/companies': {
      id: '/content-manager/companies'
      path: '/companies'
      fullPath: '/content-manager/companies'
      preLoaderRoute: typeof ContentManagerCompaniesImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/content-manager/email': {
      id: '/content-manager/email'
      path: '/email'
      fullPath: '/content-manager/email'
      preLoaderRoute: typeof ContentManagerEmailImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/content-manager/opportunities': {
      id: '/content-manager/opportunities'
      path: '/opportunities'
      fullPath: '/content-manager/opportunities'
      preLoaderRoute: typeof ContentManagerOpportunitiesImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/content-manager/people': {
      id: '/content-manager/people'
      path: '/people'
      fullPath: '/content-manager/people'
      preLoaderRoute: typeof ContentManagerPeopleImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/project-manager/canvas': {
      id: '/project-manager/canvas'
      path: '/canvas'
      fullPath: '/project-manager/canvas'
      preLoaderRoute: typeof ProjectManagerCanvasImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/inbox': {
      id: '/project-manager/inbox'
      path: '/inbox'
      fullPath: '/project-manager/inbox'
      preLoaderRoute: typeof ProjectManagerInboxImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/my-issues': {
      id: '/project-manager/my-issues'
      path: '/my-issues'
      fullPath: '/project-manager/my-issues'
      preLoaderRoute: typeof ProjectManagerMyIssuesImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/notebooks': {
      id: '/project-manager/notebooks'
      path: '/notebooks'
      fullPath: '/project-manager/notebooks'
      preLoaderRoute: typeof ProjectManagerNotebooksImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/notes': {
      id: '/project-manager/notes'
      path: '/notes'
      fullPath: '/project-manager/notes'
      preLoaderRoute: typeof ProjectManagerNotesImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/projects': {
      id: '/project-manager/projects'
      path: '/projects'
      fullPath: '/project-manager/projects'
      preLoaderRoute: typeof ProjectManagerProjectsImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/tasks': {
      id: '/project-manager/tasks'
      path: '/tasks'
      fullPath: '/project-manager/tasks'
      preLoaderRoute: typeof ProjectManagerTasksImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/content-manager/': {
      id: '/content-manager/'
      path: '/'
      fullPath: '/content-manager/'
      preLoaderRoute: typeof ContentManagerIndexImport
      parentRoute: typeof ContentManagerRouteImport
    }
    '/finance-manager/': {
      id: '/finance-manager/'
      path: '/'
      fullPath: '/finance-manager/'
      preLoaderRoute: typeof FinanceManagerIndexImport
      parentRoute: typeof FinanceManagerRouteImport
    }
    '/project-manager/': {
      id: '/project-manager/'
      path: '/'
      fullPath: '/project-manager/'
      preLoaderRoute: typeof ProjectManagerIndexImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/project-manager/project/$projectId': {
      id: '/project-manager/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project-manager/project/$projectId'
      preLoaderRoute: typeof ProjectManagerProjectProjectIdImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/task/$taskId': {
      id: '/project-manager/task/$taskId'
      path: '/task/$taskId'
      fullPath: '/project-manager/task/$taskId'
      preLoaderRoute: typeof ProjectManagerTaskTaskIdImport
      parentRoute: typeof ProjectManagerRouteImport
    }
    '/project-manager/project/$projectId/settings': {
      id: '/project-manager/project/$projectId/settings'
      path: '/settings'
      fullPath: '/project-manager/project/$projectId/settings'
      preLoaderRoute: typeof ProjectManagerProjectProjectIdSettingsImport
      parentRoute: typeof ProjectManagerProjectProjectIdImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ContentManagerRouteRouteChildren {
  ContentManagerBulkUnsubscribeRoute: typeof ContentManagerBulkUnsubscribeRoute
  ContentManagerCompaniesRoute: typeof ContentManagerCompaniesRoute
  ContentManagerEmailRoute: typeof ContentManagerEmailRoute
  ContentManagerOpportunitiesRoute: typeof ContentManagerOpportunitiesRoute
  ContentManagerPeopleRoute: typeof ContentManagerPeopleRoute
  ContentManagerIndexRoute: typeof ContentManagerIndexRoute
}

const ContentManagerRouteRouteChildren: ContentManagerRouteRouteChildren = {
  ContentManagerBulkUnsubscribeRoute: ContentManagerBulkUnsubscribeRoute,
  ContentManagerCompaniesRoute: ContentManagerCompaniesRoute,
  ContentManagerEmailRoute: ContentManagerEmailRoute,
  ContentManagerOpportunitiesRoute: ContentManagerOpportunitiesRoute,
  ContentManagerPeopleRoute: ContentManagerPeopleRoute,
  ContentManagerIndexRoute: ContentManagerIndexRoute,
}

const ContentManagerRouteRouteWithChildren =
  ContentManagerRouteRoute._addFileChildren(ContentManagerRouteRouteChildren)

interface FinanceManagerRouteRouteChildren {
  FinanceManagerIndexRoute: typeof FinanceManagerIndexRoute
}

const FinanceManagerRouteRouteChildren: FinanceManagerRouteRouteChildren = {
  FinanceManagerIndexRoute: FinanceManagerIndexRoute,
}

const FinanceManagerRouteRouteWithChildren =
  FinanceManagerRouteRoute._addFileChildren(FinanceManagerRouteRouteChildren)

interface ProjectManagerProjectProjectIdRouteChildren {
  ProjectManagerProjectProjectIdSettingsRoute: typeof ProjectManagerProjectProjectIdSettingsRoute
}

const ProjectManagerProjectProjectIdRouteChildren: ProjectManagerProjectProjectIdRouteChildren =
  {
    ProjectManagerProjectProjectIdSettingsRoute:
      ProjectManagerProjectProjectIdSettingsRoute,
  }

const ProjectManagerProjectProjectIdRouteWithChildren =
  ProjectManagerProjectProjectIdRoute._addFileChildren(
    ProjectManagerProjectProjectIdRouteChildren,
  )

interface ProjectManagerRouteRouteChildren {
  ProjectManagerCanvasRoute: typeof ProjectManagerCanvasRoute
  ProjectManagerInboxRoute: typeof ProjectManagerInboxRoute
  ProjectManagerMyIssuesRoute: typeof ProjectManagerMyIssuesRoute
  ProjectManagerNotebooksRoute: typeof ProjectManagerNotebooksRoute
  ProjectManagerNotesRoute: typeof ProjectManagerNotesRoute
  ProjectManagerProjectsRoute: typeof ProjectManagerProjectsRoute
  ProjectManagerTasksRoute: typeof ProjectManagerTasksRoute
  ProjectManagerIndexRoute: typeof ProjectManagerIndexRoute
  ProjectManagerProjectProjectIdRoute: typeof ProjectManagerProjectProjectIdRouteWithChildren
  ProjectManagerTaskTaskIdRoute: typeof ProjectManagerTaskTaskIdRoute
}

const ProjectManagerRouteRouteChildren: ProjectManagerRouteRouteChildren = {
  ProjectManagerCanvasRoute: ProjectManagerCanvasRoute,
  ProjectManagerInboxRoute: ProjectManagerInboxRoute,
  ProjectManagerMyIssuesRoute: ProjectManagerMyIssuesRoute,
  ProjectManagerNotebooksRoute: ProjectManagerNotebooksRoute,
  ProjectManagerNotesRoute: ProjectManagerNotesRoute,
  ProjectManagerProjectsRoute: ProjectManagerProjectsRoute,
  ProjectManagerTasksRoute: ProjectManagerTasksRoute,
  ProjectManagerIndexRoute: ProjectManagerIndexRoute,
  ProjectManagerProjectProjectIdRoute:
    ProjectManagerProjectProjectIdRouteWithChildren,
  ProjectManagerTaskTaskIdRoute: ProjectManagerTaskTaskIdRoute,
}

const ProjectManagerRouteRouteWithChildren =
  ProjectManagerRouteRoute._addFileChildren(ProjectManagerRouteRouteChildren)

interface SettingsRouteRouteChildren {
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/content-manager': typeof ContentManagerRouteRouteWithChildren
  '/finance-manager': typeof FinanceManagerRouteRouteWithChildren
  '/project-manager': typeof ProjectManagerRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/content-manager/bulk-unsubscribe': typeof ContentManagerBulkUnsubscribeRoute
  '/content-manager/companies': typeof ContentManagerCompaniesRoute
  '/content-manager/email': typeof ContentManagerEmailRoute
  '/content-manager/opportunities': typeof ContentManagerOpportunitiesRoute
  '/content-manager/people': typeof ContentManagerPeopleRoute
  '/project-manager/canvas': typeof ProjectManagerCanvasRoute
  '/project-manager/inbox': typeof ProjectManagerInboxRoute
  '/project-manager/my-issues': typeof ProjectManagerMyIssuesRoute
  '/project-manager/notebooks': typeof ProjectManagerNotebooksRoute
  '/project-manager/notes': typeof ProjectManagerNotesRoute
  '/project-manager/projects': typeof ProjectManagerProjectsRoute
  '/project-manager/tasks': typeof ProjectManagerTasksRoute
  '/content-manager/': typeof ContentManagerIndexRoute
  '/finance-manager/': typeof FinanceManagerIndexRoute
  '/project-manager/': typeof ProjectManagerIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/project-manager/project/$projectId': typeof ProjectManagerProjectProjectIdRouteWithChildren
  '/project-manager/task/$taskId': typeof ProjectManagerTaskTaskIdRoute
  '/project-manager/project/$projectId/settings': typeof ProjectManagerProjectProjectIdSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/content-manager/bulk-unsubscribe': typeof ContentManagerBulkUnsubscribeRoute
  '/content-manager/companies': typeof ContentManagerCompaniesRoute
  '/content-manager/email': typeof ContentManagerEmailRoute
  '/content-manager/opportunities': typeof ContentManagerOpportunitiesRoute
  '/content-manager/people': typeof ContentManagerPeopleRoute
  '/project-manager/canvas': typeof ProjectManagerCanvasRoute
  '/project-manager/inbox': typeof ProjectManagerInboxRoute
  '/project-manager/my-issues': typeof ProjectManagerMyIssuesRoute
  '/project-manager/notebooks': typeof ProjectManagerNotebooksRoute
  '/project-manager/notes': typeof ProjectManagerNotesRoute
  '/project-manager/projects': typeof ProjectManagerProjectsRoute
  '/project-manager/tasks': typeof ProjectManagerTasksRoute
  '/content-manager': typeof ContentManagerIndexRoute
  '/finance-manager': typeof FinanceManagerIndexRoute
  '/project-manager': typeof ProjectManagerIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/project-manager/project/$projectId': typeof ProjectManagerProjectProjectIdRouteWithChildren
  '/project-manager/task/$taskId': typeof ProjectManagerTaskTaskIdRoute
  '/project-manager/project/$projectId/settings': typeof ProjectManagerProjectProjectIdSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/content-manager': typeof ContentManagerRouteRouteWithChildren
  '/finance-manager': typeof FinanceManagerRouteRouteWithChildren
  '/project-manager': typeof ProjectManagerRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/content-manager/bulk-unsubscribe': typeof ContentManagerBulkUnsubscribeRoute
  '/content-manager/companies': typeof ContentManagerCompaniesRoute
  '/content-manager/email': typeof ContentManagerEmailRoute
  '/content-manager/opportunities': typeof ContentManagerOpportunitiesRoute
  '/content-manager/people': typeof ContentManagerPeopleRoute
  '/project-manager/canvas': typeof ProjectManagerCanvasRoute
  '/project-manager/inbox': typeof ProjectManagerInboxRoute
  '/project-manager/my-issues': typeof ProjectManagerMyIssuesRoute
  '/project-manager/notebooks': typeof ProjectManagerNotebooksRoute
  '/project-manager/notes': typeof ProjectManagerNotesRoute
  '/project-manager/projects': typeof ProjectManagerProjectsRoute
  '/project-manager/tasks': typeof ProjectManagerTasksRoute
  '/content-manager/': typeof ContentManagerIndexRoute
  '/finance-manager/': typeof FinanceManagerIndexRoute
  '/project-manager/': typeof ProjectManagerIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/project-manager/project/$projectId': typeof ProjectManagerProjectProjectIdRouteWithChildren
  '/project-manager/task/$taskId': typeof ProjectManagerTaskTaskIdRoute
  '/project-manager/project/$projectId/settings': typeof ProjectManagerProjectProjectIdSettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/content-manager'
    | '/finance-manager'
    | '/project-manager'
    | '/settings'
    | '/login'
    | '/signup'
    | '/content-manager/bulk-unsubscribe'
    | '/content-manager/companies'
    | '/content-manager/email'
    | '/content-manager/opportunities'
    | '/content-manager/people'
    | '/project-manager/canvas'
    | '/project-manager/inbox'
    | '/project-manager/my-issues'
    | '/project-manager/notebooks'
    | '/project-manager/notes'
    | '/project-manager/projects'
    | '/project-manager/tasks'
    | '/content-manager/'
    | '/finance-manager/'
    | '/project-manager/'
    | '/settings/'
    | '/project-manager/project/$projectId'
    | '/project-manager/task/$taskId'
    | '/project-manager/project/$projectId/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/signup'
    | '/content-manager/bulk-unsubscribe'
    | '/content-manager/companies'
    | '/content-manager/email'
    | '/content-manager/opportunities'
    | '/content-manager/people'
    | '/project-manager/canvas'
    | '/project-manager/inbox'
    | '/project-manager/my-issues'
    | '/project-manager/notebooks'
    | '/project-manager/notes'
    | '/project-manager/projects'
    | '/project-manager/tasks'
    | '/content-manager'
    | '/finance-manager'
    | '/project-manager'
    | '/settings'
    | '/project-manager/project/$projectId'
    | '/project-manager/task/$taskId'
    | '/project-manager/project/$projectId/settings'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/content-manager'
    | '/finance-manager'
    | '/project-manager'
    | '/settings'
    | '/_auth/login'
    | '/_auth/signup'
    | '/content-manager/bulk-unsubscribe'
    | '/content-manager/companies'
    | '/content-manager/email'
    | '/content-manager/opportunities'
    | '/content-manager/people'
    | '/project-manager/canvas'
    | '/project-manager/inbox'
    | '/project-manager/my-issues'
    | '/project-manager/notebooks'
    | '/project-manager/notes'
    | '/project-manager/projects'
    | '/project-manager/tasks'
    | '/content-manager/'
    | '/finance-manager/'
    | '/project-manager/'
    | '/settings/'
    | '/project-manager/project/$projectId'
    | '/project-manager/task/$taskId'
    | '/project-manager/project/$projectId/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ContentManagerRouteRoute: typeof ContentManagerRouteRouteWithChildren
  FinanceManagerRouteRoute: typeof FinanceManagerRouteRouteWithChildren
  ProjectManagerRouteRoute: typeof ProjectManagerRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ContentManagerRouteRoute: ContentManagerRouteRouteWithChildren,
  FinanceManagerRouteRoute: FinanceManagerRouteRouteWithChildren,
  ProjectManagerRouteRoute: ProjectManagerRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/content-manager",
        "/finance-manager",
        "/project-manager",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/signup"
      ]
    },
    "/content-manager": {
      "filePath": "content-manager/route.tsx",
      "children": [
        "/content-manager/bulk-unsubscribe",
        "/content-manager/companies",
        "/content-manager/email",
        "/content-manager/opportunities",
        "/content-manager/people",
        "/content-manager/"
      ]
    },
    "/finance-manager": {
      "filePath": "finance-manager/route.tsx",
      "children": [
        "/finance-manager/"
      ]
    },
    "/project-manager": {
      "filePath": "project-manager/route.tsx",
      "children": [
        "/project-manager/canvas",
        "/project-manager/inbox",
        "/project-manager/my-issues",
        "/project-manager/notebooks",
        "/project-manager/notes",
        "/project-manager/projects",
        "/project-manager/tasks",
        "/project-manager/",
        "/project-manager/project/$projectId",
        "/project-manager/task/$taskId"
      ]
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.tsx",
      "parent": "/_auth"
    },
    "/content-manager/bulk-unsubscribe": {
      "filePath": "content-manager/bulk-unsubscribe.tsx",
      "parent": "/content-manager"
    },
    "/content-manager/companies": {
      "filePath": "content-manager/companies.tsx",
      "parent": "/content-manager"
    },
    "/content-manager/email": {
      "filePath": "content-manager/email.tsx",
      "parent": "/content-manager"
    },
    "/content-manager/opportunities": {
      "filePath": "content-manager/opportunities.tsx",
      "parent": "/content-manager"
    },
    "/content-manager/people": {
      "filePath": "content-manager/people.tsx",
      "parent": "/content-manager"
    },
    "/project-manager/canvas": {
      "filePath": "project-manager/canvas.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/inbox": {
      "filePath": "project-manager/inbox.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/my-issues": {
      "filePath": "project-manager/my-issues.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/notebooks": {
      "filePath": "project-manager/notebooks.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/notes": {
      "filePath": "project-manager/notes.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/projects": {
      "filePath": "project-manager/projects.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/tasks": {
      "filePath": "project-manager/tasks.tsx",
      "parent": "/project-manager"
    },
    "/content-manager/": {
      "filePath": "content-manager/index.tsx",
      "parent": "/content-manager"
    },
    "/finance-manager/": {
      "filePath": "finance-manager/index.tsx",
      "parent": "/finance-manager"
    },
    "/project-manager/": {
      "filePath": "project-manager/index.tsx",
      "parent": "/project-manager"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/project-manager/project/$projectId": {
      "filePath": "project-manager/project/$projectId.tsx",
      "parent": "/project-manager",
      "children": [
        "/project-manager/project/$projectId/settings"
      ]
    },
    "/project-manager/task/$taskId": {
      "filePath": "project-manager/task/$taskId.tsx",
      "parent": "/project-manager"
    },
    "/project-manager/project/$projectId/settings": {
      "filePath": "project-manager/project/$projectId/settings.tsx",
      "parent": "/project-manager/project/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
