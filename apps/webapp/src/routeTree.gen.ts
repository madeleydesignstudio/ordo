/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as NotificationsIndexRouteImport } from './routes/notifications/index'
import { Route as KnowledgeIndexRouteImport } from './routes/knowledge/index'
import { Route as JournalIndexRouteImport } from './routes/journal/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsIndexRoute = NotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRouteImport,
} as any)
const KnowledgeIndexRoute = KnowledgeIndexRouteImport.update({
  id: '/knowledge/',
  path: '/knowledge/',
  getParentRoute: () => rootRouteImport,
} as any)
const JournalIndexRoute = JournalIndexRouteImport.update({
  id: '/journal/',
  path: '/journal/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeIndexRoute
  '/journal': typeof JournalIndexRoute
  '/knowledge': typeof KnowledgeIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeIndexRoute
  '/journal': typeof JournalIndexRoute
  '/knowledge': typeof KnowledgeIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home/': typeof HomeIndexRoute
  '/journal/': typeof JournalIndexRoute
  '/knowledge/': typeof KnowledgeIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/journal'
    | '/knowledge'
    | '/notifications'
    | '/projects'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/journal'
    | '/knowledge'
    | '/notifications'
    | '/projects'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/home/'
    | '/journal/'
    | '/knowledge/'
    | '/notifications/'
    | '/projects/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  JournalIndexRoute: typeof JournalIndexRoute
  KnowledgeIndexRoute: typeof KnowledgeIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/knowledge/': {
      id: '/knowledge/'
      path: '/knowledge'
      fullPath: '/knowledge'
      preLoaderRoute: typeof KnowledgeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/journal/': {
      id: '/journal/'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof JournalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  JournalIndexRoute: JournalIndexRoute,
  KnowledgeIndexRoute: KnowledgeIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
