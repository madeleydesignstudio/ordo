/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as KnowledgeRouteImport } from './routes/knowledge'
import { Route as JournalRouteImport } from './routes/journal'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const KnowledgeRoute = KnowledgeRouteImport.update({
  id: '/knowledge',
  path: '/knowledge',
  getParentRoute: () => rootRouteImport,
} as any)
const JournalRoute = JournalRouteImport.update({
  id: '/journal',
  path: '/journal',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/journal': typeof JournalRoute
  '/knowledge': typeof KnowledgeRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/journal': typeof JournalRoute
  '/knowledge': typeof KnowledgeRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/journal': typeof JournalRoute
  '/knowledge': typeof KnowledgeRoute
  '/notifications': typeof NotificationsRoute
  '/projects': typeof ProjectsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/journal'
    | '/knowledge'
    | '/notifications'
    | '/projects'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/journal'
    | '/knowledge'
    | '/notifications'
    | '/projects'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/journal'
    | '/knowledge'
    | '/notifications'
    | '/projects'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  JournalRoute: typeof JournalRoute
  KnowledgeRoute: typeof KnowledgeRoute
  NotificationsRoute: typeof NotificationsRoute
  ProjectsRoute: typeof ProjectsRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/knowledge': {
      id: '/knowledge'
      path: '/knowledge'
      fullPath: '/knowledge'
      preLoaderRoute: typeof KnowledgeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/journal': {
      id: '/journal'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof JournalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  JournalRoute: JournalRoute,
  KnowledgeRoute: KnowledgeRoute,
  NotificationsRoute: NotificationsRoute,
  ProjectsRoute: ProjectsRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
